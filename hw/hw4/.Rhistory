data(beaver1)
data(beavers)
data(co2)
library("laQCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data()
data(rallies)
summary(rallies)
??poisson
poisson
??poisson
lm
?lm
data<-read.csv("/Users/burrelvannjr/Desktop/data.csv",header=TRUE,sep=",")
lm(pctlegalize~pctwhite+pctchildhouses,data=data)
data<-read.csv("/Users/burrelvannjr/Desktop/data.csv",header=TRUE,sep=",")
lm(pctlegalize~pctwhite+pctchildhouses,data=data)
?corr
??corr
cor(pctlegalize,pctwhite)
corr(pctlegalize,pctwhite)
cor(pctlegalize)
cor.test(pctlegalize,pctwhite)
cor.test(pctlegalize,pctwhite, data=data)
cor.test(data$pctlegalize,data$pctwhite)
?chisq.test
library(laQCA)
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
app.data<-data.frame(P,R,C,U)
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.7,show.cases=TRUE)
truth
mod1 <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod1
laQCA(mod1) #Lieberson assessment
lrQCA(app.data,outcome="P")
library(iaQCA)
?qca
library(QCA)
?"QCA"
library(sna)
?sna
?iaQCA
library(iaQCA)
?iaQCA
?iaQCA
?sna
?iaQCA
?iaQCA
library(sna)
?sna
install.packages("scrapeR")
library(scrapeR)
pageSource<-scrape(url="http://cran.r-project.org/web/packages/",headers=TRUE,parse=FALSE)
pageSource
if(attributes(pageSource)$headers["statusCode"]==200) {
page<-scrape(object="pageSource")
xpathSApply(page,"//table//td/a",xmlValue)
} else {
cat("There was an error with the page. \n")
}
pageSource<-scrape(url="http://cran.r-project.org/web/packages/",headers=TRUE,parse=FALSE)
if(attributes(pageSource)$headers["statusCode"]==200) {
page<-scrape(object="pageSource")
xpathSApply(page,"//table//td/a",xmlValue)
}
else {
cat("There was an error with the page. \n")
}
library(scrapeR)
pageSource<-scrape(url="http://cran.r-project.org/web/packages/",headers=TRUE,parse=FALSE)
if(attributes(pageSource)$headers["statusCode"]==200) {
page<-scrape(object="pageSource")
xpathSApply(page,"//table//td/a",xmlValue)
} else {
cat("There was an error with the page. \n")
}
pageSource<-scrape(url="http://cran.r-project.org/web/packages/",headers=TRUE,parse=FALSE)
if(attributes(pageSource)$headers["statusCode"]==200) {
page<-scrape(object="pageSource")
xpathSApply(page,"//table//td/a",xmlValue)}
else {
cat("There was an error with the page. \n")
}
library(braQCA)
remove.packages("braQCA")
install.packages("braQCA")
install.packages("braQCA")
remove.packages("braQCA")
install.packages("braQCA")
# make the data set
library(QCAGUI)
library(QCA)
library(dplyr)
library(braQCA)
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
E<-rallies$E
B<-rallies$B
app.data<-data.frame(P,R,C,U,E,B)
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.85,show.cases=TRUE,n.cut=1)
truth
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
baQCA(mod) #bootstrapped assessment
detach("package:braQCA", unload=TRUE)
library(braQCA)
remove.packages("braQCA")
library(braQCA)
baQCA(mod) #bootstrapped assessment
baQCA(mod) #bootstrapped assessment
library(braQCA)
install.packages("~/Desktop/package/braQCA_0.9.8.0.tar.gz", repos = NULL, type = "source")
baQCA(mod) #bootstrapped assessment
library(braQCA)
library(QCAGUI)
library(QCA)
library(dplyr)
library(braQCA)
# Code to add to the example page
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
E<-rallies$E
B<-rallies$B
app.data<-data.frame(P,R,C,U,E,B)
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.85,show.cases=TRUE,n.cut=1)
truth
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
baQCA(mod) #bootstrapped assessment
remove.packages("QCAGUI")
# Code to add to the example page
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
E<-rallies$E
B<-rallies$B
app.data<-data.frame(P,R,C,U,E,B)
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.85,show.cases=TRUE,n.cut=1)
truth
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
baQCA(mod) #bootstrapped assessment
remove.packages("braQCA")
install.packages("~/Desktop/package/braQCA_0.9.8.0.tar.gz", repos = NULL, type = "source")
baQCA(mod) #bootstrapped assessment
library(braQCA)
remove.packages("braQCA")
library(braQCA)
braQCA--help
braQCA
library(braQCA)
brQCA(mod)
install.packages("~/Desktop/package/old/braQCA_0.9.7.0.tar.gz", repos = NULL, type = "source")
data()
AirPassengers
HairEyeColor
library(MASS)
birthwt
??birthwt
data<-birthwt
View(data)
data(package=MASS)
data(package="MASS")
genotype
??genotype
??minn38
??leuk
??cats
??Insurance
??Cars93
data<-Cars93
View(data)
table(data$Manufacturer, data$Type)
chisq.test(data$Manufacturer, data$Type)
chisq.test(data$Type, data$AirBags)
table(data$Type, data$AirBags)
View(data)
tapply(data$Price, data$Origin, mean, na.rm=TRUE)
t.test(data$Price ~ data$Origin)
t.test(data$Max.Price ~ data$Origin)
t.test(data$MPG.highway ~ data$Origin)
t.test(data$MPG.city ~ data$Origin)
tapply(data$Price, data$Type, mean, na.rm=TRUE)
#call the actual ANOVA/F test
#ANOVA is a bivariate relationship between one categorical/discrete independent variable of three or more groups, and one interval/continuous dependent variable
summary(aov(data$Price ~ data$Type))
cor.test(data$MPG.city, data$Cylinders)
data$Cylinders
data$MPG.city
cor.test(data$MPG.city, data$Horsepower)
chisq.test(data$Type, data$AirBags)
t.test(data$Price ~ data$Origin)
chisq.test(data$Type, data$AirBags)
t.test(data$Type, data$AirBags)
t.test(data$AirBags ~ data$Type)
summary(aov(data$AirBags ~ data$Type))
cor.test(data$AirBags ~ data$Type)
t.test(data$Price ~ data$Origin)
summary(aov(data$Price ~ data$Origin)))
summary(aov(data$Price ~ data$Origin))
tapply(data$Price, data$Origin, mean, na.rm=TRUE)
t.test(data$Price ~ data$Origin)
t.test(data$Origin ~ data$Price)
cor.test(data$MPG.city, data$Horsepower)
summary(aov(data$Price ~ data$Type))
t.test(data$Price ~ data$Type)
cor.test(data$MPG.city, data$Horsepower)
library(devtools)
install.packages("roxygen2")
library(roxygen2)
library(QCA)
#library(QCAGUI)
library(braQCA)
#library(cna)
dat1 <- createMatrix(rep(2, 6))
View(dat1)
View(dat1)
??rep
dat1 <- createMatrix(rep(0:1, 6))
View(dat1)
createMatrix(rep(0:1, 6))
createMatrix(rep(2, 6))
rep(2)
rep(2,1)
rep(2,2)
rep(2,3)
?createMatrix
createMatrix(2)
dat1 <- createMatrix(rep(2, 2))
View(dat1)
r <- 1000
c <- 1000
m0 <- matrix(0, r, c)
apply(m0, c(1,2), function(x) sample(c(0,1),1))
r <- 50
c <- 5
m0 <- matrix(0, r, c)
apply(m0, c(1,2), function(x) sample(c(0,1),1))
dat1 <- createMatrix(rep(2, 6))
dat1_ <- createMatrix(rep(2, 6))
r <- 64
c <- 6
dat1 <- matrix(0, r, c)
apply(dat1, c(1,2), function(x) sample(c(0,1),1))
rm(list=ls())
library(QCA)
#library(QCAGUI)
library(braQCA)
#library(cna)
dat1_ <- createMatrix(rep(2, 6))
r <- 64
c <- 6
dat1 <- matrix(0, r, c)
apply(dat1, c(1,2), function(x) sample(c(0,1),1))
colnames(dat1) <- LETTERS[1:6]
View(dat1)
apply(dat1, c(1,2), function(x) sample(c(0,1),1))
dat1 <- apply(dat1, c(1,2), function(x) sample(c(0,1),1))
View(dat1)
colnames(dat1) <- LETTERS[1:6]
dat2 <- dat1[sample(nrow(dat1), 10, replace=T),]
dat2
dat3 <- dat2[sample(nrow(dat2),40,replace=T),]
dat3
tt <- truthTable(as.data.frame(dat3), outcome="E", n.cut=2, incl.cut1=2)
tt <- truthTable(as.data.frame(dat3), outcome="E", n.cut=2, incl.cut1=1)
ana1 <- eqmcc(tt)
baQCA(ana1)
baQCA(ana1, sim=200)
View(dat1)
r <- 64
c <- 6
dat1 <- matrix(0, r, c)
dat1 <- apply(dat1, c(1,2), function(x) sample(c(0,1),1))
r <- 64
c <- 6
dat1 <- matrix(0, r, c)
dat1 <- apply(dat1, c(1,2), function(x) sample(c(0,1),1))
dat1_ <- createMatrix(rep(2, 6))
install.packages("RecordLinkage")
library(RecordLinkage)
install.packages("QCAfalsePositive")
library(braQCA)
# Code to add to the example page
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
E<-rallies$E
B<-rallies$B
View(rallies)
sum(rallies$P)
19/67
app.data<-data.frame(P,R,C,U,E,B)
rownames(app.data)<-rownames(rallies)
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.85,show.cases=TRUE,n.cut=1)
truth
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth
test <- csQCAbinTest(freq.y=0.2835821, configs=list(CuEB=2, rCuB=7, rcUeB=1),
total.configs=67)
library(QCAfalsePositive)
test <- csQCAbinTest(freq.y=0.2835821, configs=list(CuEB=2, rCuB=7, rcUeB=1),total.configs=67)
summary(test)
truth2<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.92,show.cases=TRUE,n.cut=3)
truth2
mod2 <- eqmcc(truth2,details=TRUE,show.cases=TRUE)
mod2
test2 <- csQCAbinTest(freq.y=0.2835821, configs=list(rCueB=6),total.configs=67)
summary(test2)
test2 <- csQCAbinTest(freq.y=0.2835821, configs=(rCueB=6),total.configs=67)
test2 <- csQCAbinTest(freq.y=0.2835821, configs=rCueB=6,total.configs=67)
baQCA(mod2)
test2 <- csQCAbinTest(freq.y=0.2835821, configs="rCueB=6",total.configs=67)
test2 <- csQCAbinTest(freq.y=0.2835821, configs=list(rCueB=6),total.configs=67)
test2
QCAfalsePositive::summary(test2)
library(plyr)
# make the data set
library(QCA)
library(dplyr)
library(tidyr)
library(braQCA)
library(psych)
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
E<-rallies$E
B<-rallies$B
app.data<-data.frame(P,R,C,U,E,B)
rownames(app.data)<-rownames(rallies)
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.85,show.cases=TRUE,n.cut=1)
truth
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
library(QCAfalsePositive)
truth
View(app.data)
app.data
app2<-app.data %>% dplyr::filter(P==1)
View(app2)
19/67
mod
csQCAbinTest(freq.y=0.2835821, configs=list(CuEB=2, rCuB=7, rcUeB=1),total.configs=67)
truth2<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.92,show.cases=TRUE,n.cut=3)
truth2
mod2 <- eqmcc(truth2,details=TRUE,show.cases=TRUE)
mod2
baQCA(mod) #bootstrapped assessment
braQCA$Probability
assess<-braQCA(mod)
assess
assess<-baQCA(mod)
assess
rec<-brQCA(app.data,outcome="P",ncut=2:max(truth$tt$n)) #bootstrapped recommendation
rec
truth2<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.92,show.cases=TRUE,n.cut=3)
truth2
mod2 <- eqmcc(truth2,details=TRUE,show.cases=TRUE)
mod2
mod
test<-csQCAbinTest(freq.y=0.2835821, configs=list(CuEB=2, rCuB=7, rcUeB=1),total.configs=67)
test
test2<-csQCAbinTest(freq.y=0.2835821, configs=list(rCueB=6),total.configs=67)
test2
asses2<-baQCA(mod2)
assess2
asses2
# make the data set
library(QCA)
library(dplyr)
library(tidyr)
library(braQCA)
library(psych)
library(QCAfalsePositive)
data(rallies)
P<-rallies$P
R<-rallies$R
C<-rallies$C
U<-rallies$U
E<-rallies$E
B<-rallies$B
app.data<-data.frame(P,R,C,U,E,B)
rownames(app.data)<-rownames(rallies)
#model1
truth<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.85,show.cases=TRUE,n.cut=1)
truth
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ba1<-baQCA(mod) #bootstrapped assessment
ba1
fp1<-csQCAbinTest(freq.y=0.2835821, configs=list(CuEB=2, rCuB=7, rcUeB=1),total.configs=67) #QCA false positive
fp1
rec<-brQCA(app.data,outcome="P",ncut=2:max(truth$tt$n)) #bootstrapped recommendation
rec
#model2
truth2<-truthTable(app.data,outcome="P",sort.by="incl",incl.cut1=0.92,show.cases=TRUE,n.cut=3)
truth2
mod2 <- eqmcc(truth2,details=TRUE,show.cases=TRUE)
mod2
ba2<-baQCA(mod2) #bootstrapped assessment
ba2
test2<-csQCAbinTest(freq.y=0.2835821, configs=list(rCueB=6),total.configs=67) #QCA false positive
test2
ba2
test2
data()
library(MASS)
surveys
survey
data<-survey
View(data)
library(dplyr)
library(tidyr)
library(plyr)
library(foreign)
library(stargazer)
library(ggplot2)
library(grid)
library(gridExtra)
library(tm)
library(topicmodels)
library(parallel)
library(tidyr)
library(purrr)
library(devtools)
library(twitteR)
library(tidytext)
library(stringi)
library(stringr)
library(RCurl)
library(MASS)
library(pdftools)
library(tiff)
library(tesseract)
library(RNewsflow)
library(lme4)
#install_github("timjurka/RTextTools")
#devtools::install_version("RTextTools",version="1.4.1")
library(RTextTools)
#devtools::install_version("e1071",version="1.6-6")
library(e1071)
#devtools::install_version("Rstem",version="0.4-1")
#devtools::install_version("sentiment",version="0.2")
library(sentiment)
library(DataCombine)
#install.packages("coefplot2",repos="http://www.math.mcmaster.ca/bolker/R")
library(coefplot2)
library(irr)
finaldata_local <- get(load('/Users/burrelvannjr/Dropbox/Professional/Research/Projects/dissertation/final_data_local_3-21.Rda'))
numarts_y_s.df<-finaldata_local %>% dplyr::count(Year, state) %>%
dplyr::rename(total_articles=n)
numplagarts_y_s.df <- finaldata_local %>%
dplyr::count(Year, state, plag) %>%
filter(plag!=0) %>%
dplyr::select(-plag) %>%
dplyr::rename(plag_articles=n)
numposarts_y_s.df <- finaldata_local %>%
dplyr::count(Year, state, pospol) %>%
filter(pospol!=0) %>%
dplyr::select(-pospol) %>%
dplyr::rename(positive_articles=n)
numnegarts_y_s.df <- finaldata_local %>%
dplyr::count(Year, state, negpol) %>%
filter(negpol!=0) %>%
dplyr::select(-negpol) %>%
dplyr::rename(negative_articles=n)
lengtharts_y_s.df <- finaldata_local %>%
dplyr::group_by(Year,state) %>%
mutate(textsize=0) %>%
dplyr::summarise(textsize = sum(length))
numjoyarts_y_s.df <- finaldata_local %>%
dplyr::count(Year, state, joy) %>%
filter(joy!=0) %>%
dplyr::select(-joy) %>%
dplyr::rename(joy_articles=n)
state_year_new <- read.dta("/Users/burrelvannjr/Dropbox/Professional/Research/Projects/dissertation/state_year_new_3-21.Rda")
state_year_new <- get(load("/Users/burrelvannjr/Dropbox/Professional/Research/Projects/dissertation/state_year_new_3-21.Rda"))
summary(nb1 <- glm.nb(positive_articles ~ plag_articles + factor(state), data = state_year_new))
summary(nb2 <- glm.nb(positive_articles ~ year + lag_plag + lag_pos + factor(state), data = state_year_new))
summary(nb3 <- glm.nb(positive_articles ~ plag_articles + year + lag_plag + lag_pos + factor(state), data = state_year_new))
summary(nb4 <- glm.nb(positive_articles ~ plag_articles + year + lag_plag + lag_pos + lnpop_i + pctcollege_i + pctemp_i + dempct_i + pctchildhouses_i + factor(state), data = state_year_new))
View(state_year_new)
1350/49
1350/50
setwd("/Users/burrelvannjr/Dropbox/Professional/Courses/Teaching/current/gradstats_csuf/hw/hw4")
#install.packages("gplots")
#library(gplots)
rm(list=ls())
#pull in GSS data set and turn it into a useable object
#GSS is a data set of 2538 individuals and their responses to questions
data <- read.csv("ice.csv",header=TRUE,sep=",")
cor.test(data$height, data$weight)
plot(height, weight)
plot(data$height, data$weight)
#to add a fit line to the scatterplot, revers the IV and DV
abline(lm(data$weight ~ data$height), col="black")
